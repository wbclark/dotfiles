# kak:filetype=sh

wlc() {
    wl-copy
}

_wlca_join() {
    local delim="$1"
    local new old
    new=$(cat)
    old=$(wl-paste)
    printf "%s%s%s" "$old" "$delim" "$new" | wl-copy
}

wlca() {
    _wlca_join ""
}

wlcas() {
    _wlca_join " "
}

wlcan() {
    _wlca_join $'\n'
}

wlcann() {
    _wlca_join $'\n\n'
}

_wlcr_parse_args() {
    local -n excludes_ref=$1
    local -n other_args_ref=$2
    shift 2
    while [ $# -gt 0 ]; do
        case "$1" in
            -v)
                if [ -n "$2" ]; then
                    excludes_ref+=("$2")
                    shift 2
                else
                    echo "Error: -v requires a pattern argument" >&2
                    return 1
                fi
                ;;
            *)
                other_args_ref+=("$1")
                shift
                ;;
        esac
    done
}

_wlcr_get_files() {
    local -n files_arr=$1
    shift
    local excludes=("$@")
    mapfile -t files_arr < <({ git ls-files --full-name; git ls-files --full-name --others --exclude-standard; } | sort -u)
    if [ ${#excludes[@]} -gt 0 ]; then
        local tmp=()
        for file in "${files_arr[@]}"; do
            local skip=false
            for pat in "${excludes[@]}"; do
                if echo "$file" | grep -E "$pat" >/dev/null; then
                    skip=true
                    break
                fi
            done
            $skip || tmp+=("$file")
        done
        files_arr=("${tmp[@]}")
    fi
}

_wlcr_get_language() {
    local file="$1"
    local ext="${file##*.}"
    case "$ext" in
        py)       echo "python" ;;
        rb)       echo "ruby" ;;
        rs)       echo "rust" ;;
        hs)       echo "haskell" ;;
        go)       echo "go" ;;
        sh|bash)  echo "bash" ;;
        sql)      echo "sql" ;;
        js)       echo "javascript" ;;
        ts)       echo "typescript" ;;
        css)      echo "css" ;;
        yml|yaml) echo "yaml" ;;
        json)     echo "json" ;;
        md)       echo "markdown" ;;
        *)        echo "" ;;
    esac
}

_wlcr_format_file() {
    local file="$1"
    local lang="$(_wlcr_get_language "$file")"
    printf "%s:\n\n" "$file"
    if [ -n "$lang" ]; then
        printf '```%s\n' "$lang"
    else
        printf '```\n'
    fi
    cat "$file"
    printf '\n```\n\n'
}

_wlcr_remove_final_newlines() {
    sed -e ':a' -e '$!{N;ba}' -e 's/\n*$//'
}

_wlcr_check_git_repo() {
    if ! git rev-parse --is-inside-work-true &>/dev/null; then
        echo "Not inside a git repository. Exiting." >&2
        return 1
    fi
}

wlcr() {
    local excludes=() other_args=()
    _wlcr_parse_args excludes other_args "$@"

    _wlcr_check_git_repo || return 1

    local files=()
    _wlcr_get_files files "${excludes[@]}"

    {
        for file in "${files[@]}"; do
            _wlcr_format_file "$file"
        done
    } | _wlcr_remove_final_newlines | wlc
}
