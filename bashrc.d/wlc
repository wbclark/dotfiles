# kak:filetype=sh

wlc() {
    wl-copy
}

_wlca_join() {
    local delim="$1"
    local new old
    new=$(cat)
    old=$(wl-paste)
    printf "%s%s%s" "$old" "$delim" "$new" | wlc
}

wlca() {
    _wlca_join ""
}

wlcas() {
    _wlca_join " "
}

wlcan() {
    _wlca_join $'\n'
}

wlcann() {
    _wlca_join $'\n\n'
}

_wlcr_parse_pattern_args() {
    local flag="$1"
    if [ -n "$2" ]; then
        printf "%s" "$2"
    else
        echo "Error: $flag requires a pattern argument" >&2
        return 1
    fi
}

_wlcr_parse_args() {
    local -n includes_ref=$1
    local -n excludes_ref=$2
    local -n other_args_ref=$3
    shift 3
    while [ $# -gt 0 ]; do
        case "$1" in
            -e)
                pattern=$(_wlcr_parse_pattern_args -e "$2") || return 1
                includes_ref+=("$pattern")
                shift 2
                ;;
            -v)
                pattern=$(_wlcr_parse_pattern_args -v "$2") || return 1
                excludes_ref+=("$pattern")
                shift 2
                ;;
            *)
                other_args_ref+=("$1")
                shift
                ;;
        esac
    done
}

_wlcr_get_initial_files() {
    {
        git ls-files --full-name
        git ls-files --full-name --others --exclude-standard
    } | sort -u
}

_wlcr_apply_includes() {
    local -n files_ref=$1
    local -n includes_ref=$2
    local tmp=()
    for file in "${files_ref[@]}"; do
        local add=false
        for pattern in "${includes_ref[@]}"; do
            if echo "$file" | grep -E "$pattern" >/dev/null; then
                add=true
                break
            fi
        done
        $add && tmp+=("$file")
    done
    files_ref=("${tmp[@]}")
}

_wlcr_apply_excludes() {
    local -n files_ref=$1
    local -n excludes_ref=$2
    local tmp=()
    for file in "${files_ref[@]}"; do
        local skip=false
        for pattern in "${excludes_ref[@]}"; do
            if echo "$file" | grep -E "$pattern" >/dev/null; then
                skip=true
                break
            fi
        done
        $skip || tmp+=("$file")
    done
    files_ref=("${tmp[@]}")
}

_wlcr_get_files() {
    local -n files_arr=$1
    local -n includes_ref=$2
    local -n excludes_ref=$3
    shift 3

    mapfile -t files_arr < <(_wlcr_get_initial_files)
    if [ ${#includes_ref[@]} -gt 0 ]; then
        _wlcr_apply_includes files_arr includes
    fi
    if [ ${#excludes_ref[@]} -gt 0 ]; then
        _wlcr_apply_excludes files_arr excludes
    fi
}

_wlcr_get_language() {
    local file="$1"
    local ext="${file##*.}"
    case "$ext" in
        py)       echo "python" ;;
        rb)       echo "ruby" ;;
        rs)       echo "rust" ;;
        hs)       echo "haskell" ;;
        go)       echo "go" ;;
        sh|bash)  echo "bash" ;;
        sql)      echo "sql" ;;
        js)       echo "javascript" ;;
        ts)       echo "typescript" ;;
        css)      echo "css" ;;
        yml|yaml) echo "yaml" ;;
        json)     echo "json" ;;
        md)       echo "markdown" ;;
        *)        echo "" ;;
    esac
}

_wlcr_format_file() {
    local file="$1"
    local lang="$(_wlcr_get_language "$file")"
    printf "%s:\n\n" "$file"
    if [ -n "$lang" ]; then
        printf '```%s\n' "$lang"
    else
        printf '```\n'
    fi
    cat "$file"
    printf '```\n\n'
}

_wlcr_remove_final_newlines() {
    sed -e ':a' -e '$!{N;ba}' -e 's/\n*$//'
}

_wlcr_check_git_repo() {
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        echo "Not inside a git repository. Exiting wlcr." >&2
        return 1
    fi
}

_wlcr_generate_report() {
    local -n includes_ref=$1
    local -n excludes_ref=$2
    local -n other_args_ref=$3

    _wlcr_check_git_repo || return 1

    local files=()
    _wlcr_get_files files includes excludes

    {
        for file in "${files[@]}"; do
            _wlcr_format_file "$file"
        done
    } | _wlcr_remove_final_newlines
}

wlcr() {
    local includes=()
    local excludes=()
    local other_args=()
    _wlcr_parse_args includes excludes other_args "$@"
    _wlcr_generate_report includes excludes other_args | wlc
}
